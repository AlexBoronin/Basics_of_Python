# 5. Реализовать класс Stationery (канцелярская принадлежность).
# Техническое задание:
#
# атрибут title (название)
# метод draw (отрисовка). Метод выводит сообщение «Запуск отрисовки»;
# создать три дочерних класса Pen (ручка), Pencil (карандаш), Handle (маркер);
# в каждом классе реализовать переопределение метода draw.
# Для каждого класса метод должен выводить уникальное сообщение;
# Подумайте о том, имеет ли смысл при переопределении draw использовать draw базового класса.
# создать экземпляры классов и проверить, что выведет описанный метод для каждого экземпляра.


# Реализовать класс Stationery (канцелярская принадлежность).
class Stationery:

    def __init__(self, title):
        # атрибут title (название)
        self.title = title

    # # метод draw (отрисовка).
    # def draw(self):
    #     return f'Запуск отрисовки'

# создать три дочерних класса Pen (ручка), Pencil (карандаш), Handle (маркер);
class Pen(Stationery):
    def __init__(self, title):
        super().__init__(title)

    def draw(self):
        # Для каждого класса метод должен выводить уникальное сообщение;
        return f'Запуск отрисовки ручкой ({self.title})'

# создать три дочерних класса Pen (ручка), Pencil (карандаш), Handle (маркер);
class Pencil(Stationery):
    def __init__(self, title):
        super().__init__(title)

    def draw(self):
        # Для каждого класса метод должен выводить уникальное сообщение;
        return f'Запуск отрисовки карандащом ({self.title})'

# создать три дочерних класса Pen (ручка), Pencil (карандаш), Handle (маркер);
class Handle(Stationery):
    def __init__(self, title):
        super().__init__(title)

    def draw(self):
        # Для каждого класса метод должен выводить уникальное сообщение;
        return f'Запуск отрисовки маркером ({self.title})'

# Подумайте о том, имеет ли смысл при переопределении draw использовать draw базового класса.
# создать экземпляры классов и проверить, что выведет описанный метод для каждого экземпляра.
# - не имеет смысла, его вообще можнло закомментить, и все работает

pen = Pen('Pen')
pencil = Pencil('Pencil')
handle = Handle('Handle')
print(pen.draw())
print(pencil.draw())
print(handle.draw())
print(f'Сначала возьмем {pen.title}, затем {pencil.title}, и уж апосля {handle.title}')
