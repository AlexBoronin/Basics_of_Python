# 1. Написать функцию email_parse(<email_address>), которая при помощи регулярного выражения
# извлекает имя пользователя и почтовый домен из email адреса и возвращает их в виде словаря.
# Техническое задание:
#
# Функция:
# принимает один параметр - строку: email
# извлекает имя пользователя - то, что до @ и домен - то, что после @
# возвращает словарь вида {'username': <имя_пользователя>, 'domain': <домен>}
# Если адрес не валиден, выбросить исключение ValueError. Можно с сообщением вида «wrong email: <email_address>»
# Шаблон имени пользователя: латинские буквы, цифры и символы: '._+-
# Шаблон домена: латинские буквы, цифры и символы .-
# В домене обязательно должна быть хотя бы одна точка
# Не использовать методы строки для извлечения информации из email - только регулярные выражения
# email полностью парсится за «один проход». Используйте группы.
# Проверьте работоспособность функции на нескольких email. Обязательно на правильных и неправильных.
# Чтобы проверить работоспособность функции на разных данных, вам придется «ловить» исключение
# в основной программе и выводить сообщение.
# Примеры/Тесты:
#
#
# >>> email_parse('someone@geekbrains.ru')
# {'username': 'someone', 'domain': 'geekbrains.ru'}
# >>> email_parse('someone@geekbrainsru')
# Traceback (most recent call last):
#   File "<stdin>", line 1, in <module>
#   ...
#     raise ValueError(msg)
# ValueError: wrong email: someone@geekbrainsru
#
# Примечание:
#
# Подумайте о возможных ошибках в адресе и постарайтесь учесть их в регулярном выражении
# Имеет ли смысл в данном случае использовать функцию re.compile()?
# Не используйте слишком широкий шаблон для почты. Шаблон должен пропускать только то, что указано в условии
# Подумайте, сколько групп здесь используется?
# 'someone@geekbrains.ru' 'someone@geekbrainsru'
import re  # импорт модуля для работы с регулярками


def email_parse(address):  # требуется функция - создаем, входной - один параметр
    #  проверка - есть ли шаблон в заданрном параметре?
    if not re.search(r'(?P<username>[^\r\n\t\f\v @]+)@(?P<domain>[^\r\n\t\f\v @]+\.[a-z]{2})', address):
        #  если шаблон не подходит под параметр, то вызываем исключение (+ печать текста с пояснением)
        raise ValueError(f'wrong email: {address}')
    else:
        #  иначе выводим с помощью метода <.groupdict()> словарь, где ключ - имя группы шаблона RegEx, значение - сама группа согласно шаблона
        rez = re.search(r'(?P<username>[^\r\n\t\f\v @]+)@(?P<domain>[^\r\n\t\f\v @]+\.[a-z]{2})', address).groupdict()
        return rez


email = 'someone@geekbrains.ru'
email1 = 'someone@geekbrainsru'
print(email_parse(email1))  #  печать возвращаемого функцией значения
